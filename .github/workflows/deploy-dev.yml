name: Deploy - dev
on:
  push:
    branches:
      - 'deploy-dev' # 推送分支时触发部署
  pull_request:
    types: [closed]
    branches:
      - 'deploy-dev' # pr关闭时触发部署

env:
  ECR_AWS_REGION: ap-southeast-1 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: moonveil-site-dev # set this to your Amazon ECR repository name
  ECS_SERVICE: moonveil-site-dev # set this to your Amazon ECS service name
  ECS_CLUSTER: MoonveilEntertainmentDev # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION:
    .aws/dev-task-def.json # set this to the path to your Amazon ECS task definition
    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME:
    moonveil-site-dev # set this to the name of the container in the
    # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_APP_DEPLOY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_APP_DEPLOY_ACCESS_KEY_SECRET }}
          aws-region: ${{ env.ECR_AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_PARAM_ACCESS_KEY_ID: ${{ secrets.AWS_APP_DEPLOY_ACCESS_KEY_ID }}
          AWS_PARAM_SECRET_ACCESS_KEY: ${{ secrets.AWS_APP_DEPLOY_ACCESS_KEY_SECRET }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build --build-arg AWS_PARAM_ACCESS_KEY_ID=$AWS_PARAM_ACCESS_KEY_ID --build-arg AWS_PARAM_SECRET_ACCESS_KEY=$AWS_PARAM_SECRET_ACCESS_KEY -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          #wait-for-service-stability: true
