# This workflow will build a docker container, publish and deploy it to Tencent Kubernetes Engine (TKE) when there is a push to the $default-branch branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Tencent Kubernetes Engine cluster,
#    including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace:
#    - TENCENT_CLOUD_SECRET_ID with Tencent Cloud secret id
#    - TENCENT_CLOUD_SECRET_KEY with Tencent Cloud secret key
#    - TENCENT_CLOUD_ACCOUNT_ID with Tencent Cloud account id
#    - TKE_REGISTRY_PASSWORD with TKE registry password
#
# 3. Change the values for the TKE_IMAGE_URL, TKE_REGION, TKE_CLUSTER_ID and DEPLOYMENT_NAME environment variables (below).

name: Deploy - dev
on:
  push:
    branches:
      - 'deploy-dev' # 推送分支时触发部署
  pull_request:
    types: [closed]
    branches:
      - 'deploy-dev' # pr关闭时触发部署

# Environment variables available to all jobs and steps in this workflow
env:
  TKE_REGISTRY_URL: moonveil-entertainment.tencentcloudcr.com
  TKE_IMAGE_URL: moonveil-entertainment.tencentcloudcr.com/moonveil/moonveil-site-backend
  TKE_REGION: ap-singapore
  TKE_CLUSTER_ID: cls-ehosfv20
  DEPLOYMENT_NAME: moonveil-site-backend-dev
  NAMESPACE: default

# permissions:
#   contents: read

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}
    environment: development

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t ${TKE_IMAGE_URL}:${GITHUB_SHA} -f ./Dockerfile .

    - name: Login to TCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.TKE_REGISTRY_URL}}
        username: ${{ secrets.TENCENT_CLOUD_ACCOUNT_ID }}
        password: ${{ secrets.TKE_REGISTRY_PASSWORD }}

    - name: Push image
      run: |
        docker push ${TKE_IMAGE_URL}:${GITHUB_SHA}

    - name: Configure TKE cluster access
      uses: TencentCloud/tke-cluster-credential-action@v1
      with:
        secret_id: ${{ secrets.TENCENT_CLOUD_SECRET_ID }}
        secret_key: ${{ secrets.TENCENT_CLOUD_SECRET_KEY }}
        tke_region: ${{ env.TKE_REGION }}
        cluster_id: ${{ env.TKE_CLUSTER_ID }}

    - name: Deploy
      run: |
        cd k8s  # 进入 k8s 目录
        export GITHUB_SHA=${{ github.sha }}
        envsubst < deployment-dev.yaml > deployment-dev-processed.yaml
        kubectl apply -f deployment-dev-processed.yaml
        kubectl -n ${NAMESPACE} rollout status deployment/${DEPLOYMENT_NAME} --timeout=90s
        # kubectl config use-context ${TKE_CLUSTER_ID}-context-default
        # kubectl -n ${NAMESPACE} set image deployment/${DEPLOYMENT_NAME} ${DEPLOYMENT_NAME}=${TKE_IMAGE_URL}:${GITHUB_SHA}
        # kubectl -n ${NAMESPACE} rollout status deployment/${DEPLOYMENT_NAME} --timeout=90s
